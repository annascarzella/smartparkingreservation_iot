[
    {
        "id": "9c7b55ced3f7365d",
        "type": "tab",
        "label": "Smartparking flow",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "ac45a6a93184702e",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "d68488966d4e4189",
        "type": "ui_tab",
        "name": "Smart_Parking",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "3466174b0640b450",
        "type": "ui_group",
        "name": "Statuses",
        "tab": "d68488966d4e4189",
        "order": 2,
        "disp": true,
        "width": "14",
        "collapse": false,
        "className": ""
    },
    {
        "id": "c51a91cb42a5ee81",
        "type": "postgreSQLConfig",
        "name": "",
        "host": "postgres",
        "hostFieldType": "str",
        "port": 5432,
        "portFieldType": "num",
        "database": "smartparking",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "applicationName": "",
        "applicationNameType": "str",
        "max": 10,
        "maxFieldType": "num",
        "idle": 1000,
        "idleFieldType": "num",
        "connectionTimeout": 10000,
        "connectionTimeoutFieldType": "num",
        "user": "admin",
        "userFieldType": "str",
        "password": "passwordsupersegretissima1!",
        "passwordFieldType": "str"
    },
    {
        "id": "06a6106d492f6497",
        "type": "sqlitedb",
        "db": "/home/skalla/GitHub/Aprus/dashboard/data.db",
        "mode": "RWC"
    },
    {
        "id": "afedeeb17f3a368a",
        "type": "mqtt-broker",
        "name": "mqttBroker",
        "broker": "ws://mqtt:8000",
        "port": "8000",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": 4,
        "keepalive": 60,
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "beed039f8ad2bf02",
        "type": "mqtt-broker",
        "name": "EclipseMQTT",
        "broker": "mqtt://mqtt.eclipseprojects.io/",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "3",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "6869e3162bd84b1f",
        "type": "ui_group",
        "name": "Heartbeats",
        "tab": "d68488966d4e4189",
        "order": 3,
        "disp": true,
        "width": "24",
        "collapse": false,
        "className": ""
    },
    {
        "id": "658eebe47cdd958e",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "server.crt",
        "servername": "",
        "verifyservercert": false,
        "alpnprotocol": ""
    },
    {
        "id": "a4f9146b0ef61071",
        "type": "mqtt-broker",
        "name": "",
        "broker": "localhost",
        "port": "1883",
        "tls": "658eebe47cdd958e",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "f0e03eefbb533ef8",
        "type": "ui_group",
        "name": "Control",
        "tab": "d68488966d4e4189",
        "order": 1,
        "disp": true,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "f797450dbcbb9e26",
        "type": "ui_group",
        "name": "ActiveReservation",
        "tab": "d68488966d4e4189",
        "order": 4,
        "disp": true,
        "width": "24",
        "collapse": false,
        "className": ""
    },
    {
        "id": "15fb2d262139bc4b",
        "type": "ui_spacer",
        "z": "9c7b55ced3f7365d",
        "name": "spacer",
        "group": "3466174b0640b450",
        "order": 2,
        "width": 2,
        "height": 1
    },
    {
        "id": "7da1c26d5077c7a7",
        "type": "ui_spacer",
        "z": "9c7b55ced3f7365d",
        "name": "spacer",
        "group": "3466174b0640b450",
        "order": 4,
        "width": 2,
        "height": 1
    },
    {
        "id": "eadf54cfb8bfb960",
        "type": "ui_spacer",
        "z": "9c7b55ced3f7365d",
        "name": "spacer",
        "group": "3466174b0640b450",
        "order": 5,
        "width": 2,
        "height": 1
    },
    {
        "id": "fafcb7e2f21d3b48",
        "type": "ui_spacer",
        "z": "9c7b55ced3f7365d",
        "name": "spacer",
        "group": "3466174b0640b450",
        "order": 6,
        "width": 2,
        "height": 1
    },
    {
        "id": "f7c903708b30f540",
        "type": "ui_spacer",
        "z": "9c7b55ced3f7365d",
        "name": "spacer",
        "group": "3466174b0640b450",
        "order": 7,
        "width": 2,
        "height": 1
    },
    {
        "id": "560b74d6300ade6b",
        "type": "ui_spacer",
        "z": "9c7b55ced3f7365d",
        "name": "spacer",
        "group": "6869e3162bd84b1f",
        "order": 2,
        "width": 24,
        "height": 1
    },
    {
        "id": "918399c40d595bd7",
        "type": "ui_spacer",
        "z": "9c7b55ced3f7365d",
        "name": "spacer",
        "group": "6869e3162bd84b1f",
        "order": 3,
        "width": 9,
        "height": 1
    },
    {
        "id": "e8e9a895ae73f63a",
        "type": "ui_spacer",
        "z": "9c7b55ced3f7365d",
        "name": "spacer",
        "group": "6869e3162bd84b1f",
        "order": 5,
        "width": 9,
        "height": 1
    },
    {
        "id": "5028fa06fc0846c2",
        "type": "ui_chart",
        "z": "9c7b55ced3f7365d",
        "name": "",
        "group": "3466174b0640b450",
        "order": 1,
        "width": 6,
        "height": 5,
        "label": "Gateways status",
        "chartType": "pie",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 930,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "272c2be8da5ee20a",
        "type": "postgresql",
        "z": "9c7b55ced3f7365d",
        "name": "",
        "query": "SET search_path TO smartparking;\nSELECT status FROM gateway;",
        "postgreSQLConfig": "c51a91cb42a5ee81",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 450,
        "y": 220,
        "wires": [
            [
                "fb4b259fd4b2e728"
            ]
        ]
    },
    {
        "id": "eae48066c573b857",
        "type": "postgresql",
        "z": "9c7b55ced3f7365d",
        "name": "",
        "query": "SET search_path TO smartparking;\nSELECT status FROM lock;",
        "postgreSQLConfig": "c51a91cb42a5ee81",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 450,
        "y": 320,
        "wires": [
            [
                "a20e470d75158f77"
            ]
        ]
    },
    {
        "id": "7b729c45ed0461b2",
        "type": "ui_chart",
        "z": "9c7b55ced3f7365d",
        "name": "",
        "group": "3466174b0640b450",
        "order": 3,
        "width": 6,
        "height": 5,
        "label": "Locks status",
        "chartType": "pie",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 890,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "df3e80af28a725dd",
        "type": "mqtt in",
        "z": "9c7b55ced3f7365d",
        "name": "",
        "topic": "1/heartbeat",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "afedeeb17f3a368a",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 170,
        "y": 500,
        "wires": [
            [
                "aa16cb1e945e8f12"
            ]
        ]
    },
    {
        "id": "aa16cb1e945e8f12",
        "type": "function",
        "z": "9c7b55ced3f7365d",
        "name": "Format locks",
        "func": "// Estrai gateway ID dal topic\nconst gatewayId = msg.topic.split(\"/\")[0] || \"Unknown\";\n\nconst ts = msg.timestamp || new Date().toISOString();\n\nconst rows = msg.payload.locks.map(lock => ({\n    gateway: gatewayId,\n    lockId: lock.id,\n    lockStatus: lock.status,\n    timestamp: ts\n}));\n\nconst msgs = rows.map(row => ({\n    payload: {\n        command: \"addRow\",\n        arguments: [row]\n    }\n}));\n\nreturn [msgs];\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 620,
        "wires": [
            [
                "b3d6f18e32e15be3"
            ]
        ]
    },
    {
        "id": "e1ad6721c64dbf13",
        "type": "ui_button",
        "z": "9c7b55ced3f7365d",
        "name": "",
        "group": "6869e3162bd84b1f",
        "order": 4,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "Clear button",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 330,
        "y": 680,
        "wires": [
            [
                "46afff36656bb200"
            ]
        ]
    },
    {
        "id": "46afff36656bb200",
        "type": "function",
        "z": "9c7b55ced3f7365d",
        "name": "clear table function",
        "func": "msg.payload = {\n    command: \"clearData\"\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 680,
        "wires": [
            [
                "b3d6f18e32e15be3"
            ]
        ]
    },
    {
        "id": "c4688e53755fca98",
        "type": "inject",
        "z": "9c7b55ced3f7365d",
        "name": "Refresh 5 sec ",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 280,
        "wires": [
            [
                "272c2be8da5ee20a",
                "eae48066c573b857",
                "90e8615ba7fa7d14"
            ]
        ]
    },
    {
        "id": "fbbd9718c3bb9e05",
        "type": "ui_dropdown",
        "z": "9c7b55ced3f7365d",
        "name": "",
        "label": "",
        "tooltip": "",
        "place": "Select option",
        "group": "f0e03eefbb533ef8",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "",
                "value": "Statuses",
                "type": "str"
            },
            {
                "label": "",
                "value": "Heartbeats",
                "type": "str"
            },
            {
                "label": "",
                "value": "ActiveReservation",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 280,
        "y": 80,
        "wires": [
            [
                "23cc690e9c789e0e"
            ]
        ]
    },
    {
        "id": "23cc690e9c789e0e",
        "type": "function",
        "z": "9c7b55ced3f7365d",
        "name": "show item",
        "func": "const hide = [\n    'Smart_Parking_Heartbeats',\n    'Smart_Parking_Statuses',\n    'Smart_Parking_ActiveReservation'\n];\nconst shown = `Smart_Parking_${msg.payload}`;\nconst show = [shown];\nhide.forEach((value,index,arr)=>{if(value===shown)arr.splice(index,1);});\nmsg.payload = {group: {hide,show}}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 80,
        "wires": [
            [
                "dbf5b85b59d98add"
            ]
        ]
    },
    {
        "id": "dbf5b85b59d98add",
        "type": "ui_ui_control",
        "z": "9c7b55ced3f7365d",
        "name": "",
        "events": "all",
        "x": 600,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "372f6c4f743670e9",
        "type": "inject",
        "z": "9c7b55ced3f7365d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0",
        "topic": "",
        "payload": "{\"group\":{\"hide\":[\"Smart_Parking_Heartbeats\",\"Smart_Parking_ActiveReservation\"],\"show\":[\"Smart_Parking_Control\",\"Smart_Parking_Statuses\"]}}",
        "payloadType": "json",
        "x": 590,
        "y": 140,
        "wires": [
            [
                "dbf5b85b59d98add"
            ]
        ]
    },
    {
        "id": "90e8615ba7fa7d14",
        "type": "postgresql",
        "z": "9c7b55ced3f7365d",
        "name": "",
        "query": "SET search_path TO smartparking;\nSELECT * FROM reservation\nWHERE start_time <= NOW()\nAND end_time >= NOW();\n",
        "postgreSQLConfig": "c51a91cb42a5ee81",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 470,
        "y": 440,
        "wires": [
            [
                "fbb20370d68a2627"
            ]
        ]
    },
    {
        "id": "fbb20370d68a2627",
        "type": "function",
        "z": "9c7b55ced3f7365d",
        "name": "Active reservation",
        "func": "let reservations = msg.payload;\n\nreservations = reservations.map(res => ({\n    id: res.id,\n    user_id: res.user_id,\n    lock_id: res.lock_id,\n    start_time: new Date(res.start_time).toLocaleString(),\n    end_time: new Date(res.end_time).toLocaleString(),\n    plate_number: res.plate_number\n}));\n\nmsg.payload = reservations;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 440,
        "wires": [
            [
                "d6ceaeee7222d2d3"
            ]
        ]
    },
    {
        "id": "b3d6f18e32e15be3",
        "type": "ui_table",
        "z": "9c7b55ced3f7365d",
        "group": "6869e3162bd84b1f",
        "name": "Lock Table",
        "order": 1,
        "width": 24,
        "height": 10,
        "columns": [
            {
                "field": "gateway",
                "title": "Gateway ID",
                "width": "25%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "lockId",
                "title": "Lock ID",
                "width": "25%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "lockStatus",
                "title": "Status",
                "width": "25%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "timestamp",
                "title": "Timestamp",
                "width": "25%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 1,
        "cts": true,
        "x": 770,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "d6ceaeee7222d2d3",
        "type": "ui_table",
        "z": "9c7b55ced3f7365d",
        "group": "f797450dbcbb9e26",
        "name": "Active Reservation Table",
        "order": 1,
        "width": 24,
        "height": 10,
        "columns": [
            {
                "field": "user_id",
                "title": "User ID",
                "width": "15%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "lock_id",
                "title": "Lock ID",
                "width": "15%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "start_time",
                "title": "Start Time",
                "width": "25%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "end_time",
                "title": "End Time",
                "width": "25%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "plate_number",
                "title": "Plate Number",
                "width": "15%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 1,
        "cts": true,
        "x": 950,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "337eb42c26a90ab9",
        "type": "mqtt in",
        "z": "9c7b55ced3f7365d",
        "name": "",
        "topic": "2/heartbeat",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "afedeeb17f3a368a",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 170,
        "y": 560,
        "wires": [
            [
                "aa16cb1e945e8f12"
            ]
        ]
    },
    {
        "id": "d7c4f42b3389323e",
        "type": "mqtt in",
        "z": "9c7b55ced3f7365d",
        "name": "",
        "topic": "3/heartbeat",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "afedeeb17f3a368a",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 170,
        "y": 620,
        "wires": [
            [
                "aa16cb1e945e8f12"
            ]
        ]
    },
    {
        "id": "fb4b259fd4b2e728",
        "type": "function",
        "z": "9c7b55ced3f7365d",
        "name": "Status Gateways",
        "func": "// conta tutti e tre gli stati in un unico passaggio\nconst counts = msg.payload.reduce((acc, item) => {\n  if (item.status === \"connected\")     acc.connected++;\n  else if (item.status === \"not_connected\") acc.not_connected++;\n  else if (item.status === \"unknown\")  acc.unknown++;\n  return acc;\n}, { connected: 0, not_connected: 0, unknown: 0 });\n\n// prepara i tre messaggi\nconst msg0 = { payload: counts.connected,     topic: \"Connected\"    };\nconst msg1 = { payload: counts.not_connected, topic: \"Disconnected\" };\nconst msg2 = { payload: counts.unknown,       topic: \"Unknown\"      };\n\n// restituisci array di messaggi, uno per ogni output\nreturn [ msg0, msg1, msg2 ];",
        "outputs": 3,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 220,
        "wires": [
            [
                "5028fa06fc0846c2"
            ],
            [
                "5028fa06fc0846c2"
            ],
            [
                "5028fa06fc0846c2"
            ]
        ]
    },
    {
        "id": "a20e470d75158f77",
        "type": "function",
        "z": "9c7b55ced3f7365d",
        "name": "Status Locks",
        "func": "// Conta tutti e quattro gli stati in un solo passaggio\nconst counts = msg.payload.reduce((acc, item) => {\n    switch (item.status) {\n        case \"reserved\": acc.reserved++; break;\n        case \"occupied\": acc.occupied++; break;\n        case \"free\": acc.free++; break;\n        case \"out_of_order\": acc.outOfOrder++; break;\n    }\n    return acc;\n}, { reserved: 0, occupied: 0, free: 0, outOfOrder: 0 });\n\n// Prepara un messaggio per ciascuna uscita\nconst msg0 = { payload: counts.reserved, topic: \"Reserved\" };\nconst msg1 = { payload: counts.occupied, topic: \"Occupied\" };\nconst msg2 = { payload: counts.free, topic: \"Free\" };\nconst msg3 = { payload: counts.outOfOrder, topic: \"Out of order\" };\n\n// Ritorna i 4 messaggi come array, uno per ogni output\nreturn [msg0, msg1, msg2, msg3];\n",
        "outputs": 4,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 320,
        "wires": [
            [
                "7b729c45ed0461b2"
            ],
            [
                "7b729c45ed0461b2"
            ],
            [
                "7b729c45ed0461b2"
            ],
            [
                "7b729c45ed0461b2"
            ]
        ]
    },
    {
        "id": "aa1e55b05de309d1",
        "type": "inject",
        "z": "9c7b55ced3f7365d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Statuses",
        "payloadType": "str",
        "x": 120,
        "y": 80,
        "wires": [
            [
                "fbbd9718c3bb9e05"
            ]
        ]
    }
]